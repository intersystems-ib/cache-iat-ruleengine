<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="IAT.RuleEngine.Definition">
<Description>
Abstract rule representation</Description>
<IncludeCode>IAT.RuleEngine</IncludeCode>
<Super>%XGEN.AbstractDocument</Super>
<System>3</System>
<TimeCreated>63694,46672.128224</TimeCreated>

<Parameter name="NAMESPACE">
<Default>RuleEngine</Default>
</Parameter>

<Parameter name="XMLNAMESPACE">
<Default>RuleEngine</Default>
</Parameter>

<Parameter name="ROOTCLASSES">
<Type>STRING</Type>
<Default>IAT.RuleEngine.Definition:Definition</Default>
</Parameter>

<Property name="Identifier">
<Type>%String</Type>
<Parameter name="MAXLEN" value="200"/>
<Parameter name="XMLPROJECTION" value="ATTRIBUTE"/>
</Property>

<Property name="Rules">
<Type>Rule</Type>
<Collection>list</Collection>
<Parameter name="XMLPROJECTION" value="ELEMENT"/>
</Property>

<XData name="XMLData">
<Description>
XML Rule definition</Description>
<Data><![CDATA[
<Definition>
</Definition>
]]></Data>
</XData>

<Method name="%OnBeforeGenerateCode">
<Description><![CDATA[
This method is called when a class containing an XGEN
document is compiled. It is called <em>before</em> the <method>%GenerateCode</method> method
processes its children.<br>
<var>pTargetClass</var> is the class that contains the XGEN document.<br/>
<var>pCode</var> is a stream containing the generated code.<br/>
<var>pDocument</var> is the top-level XGEN document object that contains this node.<br/>
A subclass can provide an implementation of this method that will
generate specific lines of code.<br/>]]></Description>
<FormalSpec>pTargetClass:%Dictionary.CompiledClass,pCode:%Stream.TmpCharacter,pDocument:%XGEN.AbstractDocument</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

    do pCode.WriteLine("#define AddLog(%line) set log($i(log))=""[""_$zdatetime($ztimestamp,3)_""] ""_%line")
    do pCode.WriteLine(..%Indent(1) _ "set ret=$$$OK")
    do pCode.WriteLine(..%Indent(1) _ "try {")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnAfterGenerateCode">
<Description><![CDATA[
This method is called when a class containing an XGEN
document is compiled. It is called <em>after</em> the <method>%GenerateCode</method> method
processes its children.<br>
<var>pTargetClass</var> is the class that contains the XGEN document.<br/>
<var>pCode</var> is a stream containing the generated code.<br/>
<var>pDocument</var> is the top-level XGEN document object that contains this node.<br/>
A subclass can provide an implementation of this method that will
generate specific lines of code.<br/>]]></Description>
<FormalSpec>pTargetClass:%Dictionary.CompiledClass,pCode:%Stream.TmpCharacter,pDocument:%XGEN.AbstractDocument</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do pCode.WriteLine(..%Indent(1) _ "} catch ex {")
    do pCode.WriteLine(..%Indent(2) _ "set ret = ex.AsStatus()")
    do pCode.WriteLine(..%Indent(1) _ "}")
    do pCode.WriteLine(..%Indent(1) _ "quit ret")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetXMLElementsForClass">
<Description><![CDATA[
Return an array of XML element names that could be used within a
document wherever <var>pClass</var> is expected.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%String,*pElements</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If pClass="%XGEN.AbstractNode" Quit $$$OK
    Quit ##super(pClass, .pElements)
]]></Implementation>
</Method>
</Class>
</Export>
